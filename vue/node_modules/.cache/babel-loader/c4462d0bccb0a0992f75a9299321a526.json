{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"square\",\n    onClick: $setup.handleClick\n  }, _toDisplayString($setup.cell), 1\n  /* TEXT */\n  );\n}","map":{"version":3,"mappings":";;uBACIA,oBAEM,KAFN,EAEM;IAFDC,KAAK,EAAC,QAEL;IAFeC,OAAK,EAAEC;EAEtB,CAFN,mBACMA,YADN,EACU;EAAA;EADV","names":["_createElementBlock","class","onClick","$setup"],"sourceRoot":"","sources":["/Users/strawberrypompey/tacos/frontend/vue/src/components/Square.vue"],"sourcesContent":["<template>\n    <div class=\"square\" @click=\"handleClick\">\n        {{cell}}\n    </div>\n</template>\n<script setup>\nimport { useGameStore } from '../store/store'\nimport { winner } from '../utils/winner'\nimport { watch, reactive, toRefs, computed } from 'vue'\nconst props = defineProps(['position'])\nconst store = useGameStore()\nconst data = reactive({ pos: props.position, cell: null })\nconst getResult = computed(() => { return store.result })\nconst getHistory = computed(() => { return store.history })\nconst { pos, cell } = toRefs(data)\nwatch([getResult], () => {\n    cell = null\n})\nconst handleClick = () => {\n    const current_value = store.getCount() % 2 == 0 ? 'X' : 'O'\n    if (cell === null) {\n        cell = current_value\n        store.renewHistory(pos)\n        store.addCount();\n    }\n    const res = winner(store.currentHistory)\n    if (res.result) {\n        alert(`${res.winner}`)\n        store.setResult();\n        setTimeout(() => { store.$reset(); }, 10)\n    }\n}\n</script>\n<style scoped>\n.square {\n    display: inline-block;\n    height: 100px;\n    width: 100px;\n    border: solid 2px black;\n    font-size: 50px;\n    line-height: 100px;\n    text-align: center;\n}\n\n.square:hover {\n    color: red;\n    border-color: red;\n}\n</style>"]},"metadata":{},"sourceType":"module"}